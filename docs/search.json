[
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "Tables",
    "section": "",
    "text": "Relational databases store data in two-dimensional tables representing one object or entity about which we collect and store data.\n\nEach column identifies an attribute of the object or entity the table describes.\nEach row identifies an instance of a unique entity or object the table describes.",
    "crumbs": [
      "Relational Databases",
      "Tables"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "This is a Quarto website, and IT IS CURRENTLY UNDER CONSTRUCTION!\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "scripts.html",
    "href": "scripts.html",
    "title": "SQL Scripts",
    "section": "",
    "text": "Embedded video.",
    "crumbs": [
      "SQL Scripts",
      "SQL Scripts"
    ]
  },
  {
    "objectID": "relationships.html",
    "href": "relationships.html",
    "title": "Relationships",
    "section": "",
    "text": "One-to-One, One-to-Many (most common and is the case on this page), or Many-to-Many\n\n\n\nFigure 2: CustID, the primary key in the Customer table, and CustID, the foreign key in the Sales Order table form a relationship between the two tables.",
    "crumbs": [
      "Relational Databases",
      "Relationships"
    ]
  },
  {
    "objectID": "keys.html",
    "href": "keys.html",
    "title": "Key Attributes",
    "section": "",
    "text": "A primary key is one or more columns in a table that uniquely identifies individual rows. The primary key column(s) must contain values (i.e., they cannot be NULL). A foreign key is a column that is a primary key in another table that is used to link two tables together.\n\n\n\nFigure 1: Primary keys and foreign keys",
    "crumbs": [
      "Relational Databases",
      "Key Attributes"
    ]
  },
  {
    "objectID": "normalization.html",
    "href": "normalization.html",
    "title": "Normalization",
    "section": "",
    "text": "The goal is to avoid update anomalies, insert anomalies, and delete anomalies.",
    "crumbs": [
      "Relational Databases",
      "Normalization"
    ]
  },
  {
    "objectID": "normalization.html#update-anomalies",
    "href": "normalization.html#update-anomalies",
    "title": "Normalization",
    "section": "Update Anomalies",
    "text": "Update Anomalies\nCustomer address change requires updates to every occurrence of the customer address.\n\n\n\nFigure 4:",
    "crumbs": [
      "Relational Databases",
      "Normalization"
    ]
  },
  {
    "objectID": "normalization.html#insert-anomalies",
    "href": "normalization.html#insert-anomalies",
    "title": "Normalization",
    "section": "Insert Anomalies",
    "text": "Insert Anomalies\nNew customers will not be added until they place an order, or they will be added with null values.\n\n\n\nFigure 5:",
    "crumbs": [
      "Relational Databases",
      "Normalization"
    ]
  },
  {
    "objectID": "normalization.html#delete-anomalies",
    "href": "normalization.html#delete-anomalies",
    "title": "Normalization",
    "section": "Delete Anomalies",
    "text": "Delete Anomalies\nDeleting an order for a customer with only one purchase will result in the deletion of all customer information.\n\n\n\nFigure 6:",
    "crumbs": [
      "Relational Databases",
      "Normalization"
    ]
  },
  {
    "objectID": "structure.html",
    "href": "structure.html",
    "title": "Structure",
    "section": "",
    "text": "Relational databases store data in a set of related tables to avoid data redundancy and should have the following characteristics1:",
    "crumbs": [
      "Relational Databases",
      "Structure"
    ]
  },
  {
    "objectID": "structure.html#footnotes",
    "href": "structure.html#footnotes",
    "title": "Structure",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRomney, M.B., P.J. Steinbart, S.L. Summers, D.A. Wood. Accounting Information Systems 15th ed. Hoboken, NJ: Pearson Education, 2021.↩︎",
    "crumbs": [
      "Relational Databases",
      "Structure"
    ]
  },
  {
    "objectID": "index.html#head2",
    "href": "index.html#head2",
    "title": "Introduction",
    "section": "",
    "text": "Delete\n\n\nTest adding text",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "connection.html",
    "href": "connection.html",
    "title": "Establish Connection",
    "section": "",
    "text": "You will use SQL Developer software installed in the KU Virtual Lab (AVD) to access your own assigned user schema and to run Structured Query Language (SQL) queries. In our Oracle database, this schema represents your personal space.\nYour user has the privileges necessary to add or remove certain database objects (e.g., tables and views) within your schema. I allocated each schema 100 MB of storage, which is more than enough space for this course.\nTo begin the setup process, you need to know your KU Online ID. This ID usually includes your first and last initial, each followed by three digits (e.g., b236z280), and it is what you use to access most of KU’s technology resources. Your KU Online ID will serve as your Username (and the name of your schema) in our database. You will need this ID as you complete the steps outlined below.\nTo access the database and run queries, you need to create a connection between the SQL Developer software on the AVD and your schema in our Oracle database.\n\nLogin to the AVD by following the instructions provided on Canvas in Modules &gt; Start Here &gt; 3. Access KU’s Virtual Lab / Azure Virtual Desktop.\nLaunch the SQL Developer application on the AVD. If a dialog box appears asking about importing settings from a previous installation of SQL Developer, click No. If the SQL Developer Welcome Page appears with text that is difficult to read once the application launches and finishes loading, uncheck “Show on startup” at the bottom of the window, and close and re-launch SQL Developer.\nClick on the green + button in “Connections” in the upper left corner. The New / Select Database Connection dialog will open.\nEnter the information provided in Canvas:\n\nName: A746 DB Connection\nUsername: Enter your KU Online ID\nPassword: Enter the password shared on Canvas (make sure the Save Password box is checked)\nConnection Type: See Canvas\nHostname: See Canvas\nPort: See Canvas\nSelect Service name and enter the information in Canvas\n\nAt this point, your New / Select Database Connection window should look similar (but not identical) to the image shared on Canvas. Note that you will not have any connections listed in left hand portion of the window yet unless you previously used SQL Developer and added connections.\nTest your connection by clicking on the Test button. If you see “Status: Success” under the list of connections, proceed to the next step. If your connection is not successful, double check your settings based on the instructions in the previous step. If you continue to have problems, contact me through Microsoft Teams for assistance.\nClick the Save button. Note that you should now see one connection (the one connection that you just created), not four connections as you see in the image above.\nClick the Connect button. The New / Select Database Connection dialog should disappear, and your cursor should be in a blank SQL worksheet.\nYou will learn how to write SQL scripts to run queries within SQL Developer. When we write queries, it is often helpful to have line numbers associated with each line of a query to help when debugging issues with the syntax in your script. In the SQL Developer menu, navigate to Tools &gt; Preferences &gt; Code Editor &gt; Line Gutter, and check the box next to Show Line Numbers.\n[INSERT IMAGE]\nClick OK to apply the setting.\nYou should now see line numbers in the code editor (see below) where you will write queries.\n[INSERT IMAGE]\nExecute the sample command you see below (retype the SQL statement in the Worksheet and click on the green triangle button). Compare your Query Result to the Query Result below.\nExecute the same command you executed in the step above; however, this time click the button to the right of the button you clicked in the previous step. While the report contents are the same, the report format and location are different.\n[INSERT IMAGE]",
    "crumbs": [
      "SQL Scripts",
      "Establish Connection"
    ]
  }
]